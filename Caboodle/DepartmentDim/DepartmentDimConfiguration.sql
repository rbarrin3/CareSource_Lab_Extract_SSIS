-- This script is generated by a tool. Changes may be lost when this script is regenerated.
--*********************************************************************
-- TITLE:         DepartmentDimConfiguration
-- PURPOSE:       To insert configuration data for DepartmentDim and the following custom packages:
--                Department Load
-- DATABASE:      Staging
--*********************************************************************

-- Make sure that Source and Target versions are compatible
DECLARE @iTargetVersion tinyint,
        @iTargetMinorVersion int,
        @iSourceVersion tinyint,
        @iSourceMinorVersion int,
        @VersionCompatible bit,
        @sVersionErrorMessage nvarchar(500)
SET @iSourceVersion = 31
SET @iSourceMinorVersion = 378
SET @iTargetVersion = CAST( Epic.GetConfigurationValue( N'WarehouseVersion' ) AS tinyint )
SET @iTargetMinorVersion = CAST( Epic.GetConfigurationValue( N'WarehouseMinorVersion' ) AS int )
SET @VersionCompatible = CASE WHEN ( @iTargetVersion = @iSourceVersion
                                       AND ( @iTargetMinorVersion >= @iSourceMinorVersion ) )
                                OR ( @iTargetVersion > @iSourceVersion AND @iTargetVersion <= @iSourceVersion + 4 )
                                  THEN 1 ELSE 0 END
IF @VersionCompatible = 0
BEGIN
  SET @sVersionErrorMessage = N'The target version must be within four versions of the source version for this script to be installed. 
The source version is ' + CAST( Epic.GetWarehouseVersionName( @iSourceVersion, @iSourceMinorVersion ) AS nvarchar(50) ) 
+ N', so this script can only be installed on versions ' + CAST( Epic.GetWarehouseVersionName( @iSourceVersion, @iSourceMinorVersion ) AS nvarchar(50) ) 
+ N'+, ' + CAST( Epic.GetWarehouseVersionName( @iSourceVersion + 1, 0 ) AS nvarchar(50)) + N'+, ' + CAST( Epic.GetWarehouseVersionName( @iSourceVersion + 2, 0 ) AS nvarchar(50) ) 
+ N'+, ' + CAST( Epic.GetWarehouseVersionName(@iSourceVersion + 3, 0) AS nvarchar(50)) + N'+, and ' + CAST( Epic.GetWarehouseVersionName(@iSourceVersion + 4, 0) AS nvarchar(50)) + N'+.' 
+ N' The current target version is ' + CAST( Epic.GetWarehouseVersionName( @iTargetVersion, @iTargetMinorVersion ) AS nvarchar(50) ) + N'.';
  THROW 50001, @sVersionErrorMessage, 0;
END

--Check that the database being used is staging database
IF DB_NAME() = dbo.GetReportingDatabaseName()
BEGIN
  ;THROW 50001, 'Script cannot be run on the reporting database. Please run on the staging database.', 0; 
END

-- Make sure that all non-recurring jobs that need to be processed are completed
DECLARE @JobExistCheck bit

EXECUTE Epic.CheckJobExistence @i_IgnoreRecurringJobs = 1, @o_Exist = @JobExistCheck OUTPUT
IF @JobExistCheck = 1
BEGIN;
  THROW 50001, N'There are background jobs waiting to be processed. All non-recurring jobs must be processed before executing this script.', 0;
END

-- Make sure no lookups are broken
DECLARE @sBrokenLookups nvarchar(MAX)
EXECUTE Epic.StringAgg
  @i_sSql = N'SELECT <<Lookups.TableEtlName + N''.'' + Lookups.KeyColumnName>>
                FROM Config.Lookups Lookups
                  INNER JOIN Config.TableEtls TableEtls
                    ON Lookups.TableEtlName = TableEtls.TableEtlName
                  INNER JOIN Config.WarehouseTables WarehouseTables
                    ON Lookups.LookupTableName = WarehouseTables.TableName
                WHERE WarehouseTables.TableEtlName = N''DepartmentDim''
                  AND ( Lookups.LookupType IN ( N''DurableId'', N''SourceDataDurableId'' )
                    OR ( Lookups.LookupType IN ( N''Id'', N''SourceDataId'' ) AND COALESCE( Lookups.DateColumnName, N'''' ) <> N'''' ) ) 
                ORDER BY Lookups.TableEtlName, Lookups.KeyColumnName',
  @o_sDelimitedString = @sBrokenLookups OUTPUT
IF COALESCE( @sBrokenLookups, N'' ) <> N''
BEGIN
  SET @sBrokenLookups = N'Unable to set the component to no change tracking (Type 1) because this would break the following lookup columns to DepartmentDim: ' + @sBrokenLookups;
  THROW 50001, @sBrokenLookups, 0;
END

-- Check if historical rows will need to be deleted
DECLARE @RemoveHistoricalRows bit
SET @RemoveHistoricalRows = CASE WHEN EXISTS ( SELECT 1
                                                 FROM Config.TableEtlColumns
                                                 WHERE TableEtlName = N'DepartmentDim'
                                                     AND Type2 = 1 ) THEN 1
                                 ELSE 0 END

-- Make sure that there are no failed ETL tasks for the DMC
IF EXISTS( SELECT 1 
             FROM Epic.FailedEtlTasks
               WHERE EtlName = N'DepartmentDim'
               AND [Fixed] = 0
           UNION ALL
           SELECT 1
             FROM Epic.EtlPerformanceInfoLog
             WHERE [Level] IN (N'Task', N'Detail')
               AND EtlName = N'DepartmentDim'
               AND EndTime IS NULL )
BEGIN;
  THROW 50001, N'DepartmentDim can''t be deployed because it has a failed ETL task and/or is currently running', 0;
END

-- Make sure that the package sources exist
IF Epic.GetIdForSourceName( N'Clarity' ) IS NULL
BEGIN;
  THROW 50001, N'Package source Clarity doesn''t exist in the target environment', 0;
END

-- Make sure that the selected packages do not exist in other DMCs
DECLARE @sDmcNameInUse nvarchar(300),
        @sPackageNameInUse nvarchar(300),
        @sPackageErrorMessage nvarchar(MAX)

SET @sPackageErrorMessage = ISNULL( @sPackageErrorMessage, '' ) 
SELECT @sPackageErrorMessage += N'Package ' + Packages.PackageName + N' is in use in DMC ' + Packages.TableEtlName + N'. '
  FROM Config.Packages Packages
  WHERE Packages.TableEtlName <> N'DepartmentDim'
    AND Packages.PackageName IN (N'DepartmentDim_Department_Load_2015')
IF @sPackageErrorMessage <> N''
BEGIN;
  THROW 50001, @sPackageErrorMessage, 0;
END

-- Make sure that you can acquire system level lock
DECLARE @SuccessCheck bit,
        @sErrorCheck nvarchar(MAX),
        @sLockedByCheck nvarchar(200)

EXECUTE AppLocking.AcquireSessionSpecificSystemLock @i_sLockOwner = N'Console Generated Script',
                                                    @i_sLockType = N'Exclusive',
                                                    @o_GotLock = @SuccessCheck OUTPUT,
                                                    @o_sCurrentLockOwner = @sLockedByCheck OUTPUT;
IF @SuccessCheck = 0
BEGIN
  SET @sErrorCheck = CASE WHEN NULLIF(@sLockedByCheck, N'') IS NULL THEN N'Background process' ELSE @sLockedByCheck END
    + N' is currently locking system. Try again later.';
  THROW 50001, @sErrorCheck, 1;
END

SET NOCOUNT ON

DECLARE @sDmcName nvarchar(50),
        @EpicReleased bit,
        @HasDeveloperAccess bit,
        @ScriptType nvarchar(50),
        @sPackageNames nvarchar(max)

SET @sDmcName = N'DepartmentDim'
SET @EpicReleased = 0
SET @HasDeveloperAccess = 1
SET @ScriptType = N'Dmc&Package'
SET @sPackageNames = N'DepartmentDim_Department_Load_2015'

BEGIN TRY
BEGIN TRANSACTION

  EXECUTE Console.PreDmcScript @sDmcName, @EpicReleased, @HasDeveloperAccess, @ScriptType

  EXECUTE Console.PreInsertIntoEtlDependencies @sDmcName, @EpicReleased, @ScriptType, @sPackageNames

  -- Insert into EtlDependencies
  --    No data   

  EXECUTE Console.PostInsertIntoEtlDependencies @sDmcName, @EpicReleased

  EXECUTE Console.PreInsertIntoLookups @sDmcName, @EpicReleased

  -- Insert into Lookups
  --    No data   

  -- Insert into DmcMatching
  --    No data   

  -- Insert into MatchingRules
  --    No data   

  -- Insert into MatchingRuleColumns
  --    No data   

  -- Insert into MatchingRuleColumnExcludedValues
  --    No data   

  EXECUTE Console.PreInsertIntoPackages @i_sDmcName = @sDmcName, @i_EpicReleased = @EpicReleased, @i_sPackageNames = @sPackageNames

  -- Insert into Packages
  --    No data   

  EXECUTE Console.PreInsertIntoPackageSources @i_EpicReleased = @EpicReleased

  -- Insert into PackageSources
  --    No data   

  EXECUTE Console.PostInsertIntoPackageSources @sDmcName

  -- Insert into PackageBaseIdColumns
  --    No data   

  EXECUTE Console.PreInsertIntoPackageCategoryTables @i_EpicReleased = @EpicReleased

  -- Insert into PackageCategoryTables
  --    No data   

  EXECUTE Console.PreInsertIntoPackageClaritySourceColumns @i_EpicReleased = @EpicReleased

  -- Insert into PackageClaritySourceColumns
  EXECUTE Console.InsertIntoPackageClaritySourceColumns
    @i_sTableEtlName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_DeletePackage = 0,
    @i_sSourceColumnName = N'INPATIENT_DEPT_YN_X',
    @i_sDataType = N'varchar',
    @i_iStringLength = 1,
    @i_iNumericPrecision = NULL,
    @i_iNumericScale = NULL,
    @i_EpicReleased = 0

  EXECUTE Console.InsertIntoPackageClaritySourceColumns
    @i_sTableEtlName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_DeletePackage = 0,
    @i_sSourceColumnName = N'RECORD_STATUS_X',
    @i_sDataType = N'int',
    @i_iStringLength = NULL,
    @i_iNumericPrecision = NULL,
    @i_iNumericScale = NULL,
    @i_EpicReleased = 0

  EXECUTE Console.PreInsertIntoPackageClarityTables @i_EpicReleased = @EpicReleased

  -- Insert into PackageClarityTables
  --    No data   

  EXECUTE Console.PostInsertIntoPackageClarityTables

  EXECUTE Console.PreInsertIntoPackageColumns @EpicReleased

  -- Insert into PackageColumns
  EXECUTE Console.InsertIntoPackageColumns
    @i_sTableEtlName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_sColumnName = N'InpatientDeptYN_X',
    @i_sDescription = NULL,
    @i_sExpression = N' [INPATIENT_DEPT_YN_X] ',
    @i_IgnoreError = 1,
    @i_sDataType = N'nvarchar',
    @i_iStringLength = 50,
    @i_iNumericPrecision = NULL,
    @i_iNumericScale = NULL,
    @i_IsDelete = 0,
    @i_IsValid = 1,
    @i_EpicReleased = 0,
    @i_sClarityTimeZone = NULL,
    @i_sTimeZoneOverride = NULL

  EXECUTE Console.InsertIntoPackageColumns
    @i_sTableEtlName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_sColumnName = N'RecordStatus_X',
    @i_sDescription = NULL,
    @i_sExpression = N' [RECORD_STATUS_X] ',
    @i_IgnoreError = 1,
    @i_sDataType = N'int',
    @i_iStringLength = NULL,
    @i_iNumericPrecision = NULL,
    @i_iNumericScale = NULL,
    @i_IsDelete = 0,
    @i_IsValid = 1,
    @i_EpicReleased = 0,
    @i_sClarityTimeZone = NULL,
    @i_sTimeZoneOverride = NULL

  EXECUTE Console.PreInsertIntoPackageAllowedForeignKeyIdTypes

  -- Insert into PackageAllowedForeignKeyIdTypes
  --    No data   

  EXECUTE Console.PostInsertIntoPackageAllowedForeignKeyIdTypes @sDmcName

  EXECUTE Console.PreInsertIntoPackageDataDependencies @i_EpicReleased = @EpicReleased

  -- Insert into PackageDataDependencies
  --    No data   

  EXECUTE Console.PreInsertIntoPackageDataSources @i_EpicReleased = @EpicReleased

  -- Insert into PackageDataSources
  EXECUTE Console.InsertIntoPackageDataSources
    @i_sTableEtlName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_sColumnName = N'InpatientDeptYN_X',
    @i_sSourceTableName = N'CLARITY_DEP',
    @i_sSourceColumnName = N'INPATIENT_DEPT_YN',
    @i_EpicReleased = 0,
    @i_IsAutomaticallyGenerated = 1,
    @i_IsValid = NULL

  EXECUTE Console.InsertIntoPackageDataSources
    @i_sTableEtlName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_sColumnName = N'RecordStatus_X',
    @i_sSourceTableName = N'CLARITY_DEP',
    @i_sSourceColumnName = N'RECORD_STATUS',
    @i_EpicReleased = 0,
    @i_IsAutomaticallyGenerated = 1,
    @i_IsValid = NULL

  EXECUTE Console.PreInsertIntoPackageIdTypes @i_EpicReleased = @EpicReleased

  -- Insert into PackageIdTypes
  --    No data   

  EXECUTE Console.PostInsertIntoPackageIdTypes @sDmcName

  EXECUTE Console.PreInsertIntoPackageVariables @i_EpicReleased = @EpicReleased

  -- Insert into PackageVariables
  --    No data   

  EXECUTE Console.PostInsertIntoPackageVariables

  EXECUTE Console.PreInsertIntoPackageQueryExtensions

  -- Insert into PackageQueryExtensions
  EXECUTE Console.InsertIntoPackageQueryExtensions
    @i_sDmcName = N'DepartmentDim',
    @i_sPackageName = N'DepartmentDim_Department_Load_2015',
    @i_sTagName = N'SelectTag',
    @i_sExtensionSql = N'CLARITY_DEP.INPATIENT_DEPT_YN INPATIENT_DEPT_YN_X,
CLARITY_DEP.RECORD_STATUS RECORD_STATUS_X'

  EXECUTE Console.PreInsertIntoProcedureEtls @sDmcName, @EpicReleased

  -- Insert into ProcedureEtls
  --    No data   

  EXECUTE Console.PostInsertIntoProcedureEtls

  EXECUTE Console.PreInsertIntoTableEtls @sDmcName, @EpicReleased

  -- Insert into TableEtls
  --    No data   

  EXECUTE Console.PreInsertIntoTableEtlColumns @sDmcName, @EpicReleased

  -- Insert into TableEtlColumns
  EXECUTE Console.InsertIntoTableEtlColumns
    @i_sTableEtlName = N'DepartmentDim',
    @i_sTableName = N'DepartmentDim',
    @i_sColumnName = N'InpatientDeptYN_X',
    @i_sBaseColumnName = N'InpatientDeptYN',
    @i_sDataType = N'nvarchar(50)',
    @i_AllowNull = 0,
    @i_sDefaultValue = N'*Unknown',
    @i_sDeleteValue = N'*Deleted',
    @i_Reporting = 1,
    @i_Import = 1,
    @i_ExistingBackfillIdsImport = 0,
    @i_DeleteImport = 0,
    @i_SourceData = 0,
    @i_SurrogateKey = 0,
    @i_IdType = 0,
    @i_Id = 0,
    @i_IdTypeId = 0,
    @i_Type1 = 1,
    @i_Type2 = 0,
    @i_DurableKey = 0,
    @i_StartDate = 0,
    @i_EndDate = 0,
    @i_IsCurrent = 0,
    @i_Junk = 0,
    @i_PostEtlType1 = 0,
    @i_PostEtlType2 = 0,
    @i_SourceDataType1 = 0,
    @i_SourceDataType2 = 0,
    @i_sDescription = N'Indicates whether or not this department is an inpatient department',
    @i_sImportDescription = N'Indicates whether or not this department is an inpatient department',
    @i_iIndex = 710,
    @i_HasStandard = 0,
    @i_iColumnStandardId = NULL,
    @i_EpicReleased = 0,
    @i_ExclFromThirdPartyViews = 1,
    @i_IsSourceColumn = 0,
    @i_IsStatusColumn = 0,
    @i_IsBridgeComboColumn = 0,
    @i_IsPartitioningColumn = 0

  EXECUTE Console.InsertIntoTableEtlColumns
    @i_sTableEtlName = N'DepartmentDim',
    @i_sTableName = N'DepartmentDim',
    @i_sColumnName = N'RecordStatus_X',
    @i_sBaseColumnName = N'RecordStatus',
    @i_sDataType = N'int',
    @i_AllowNull = 0,
    @i_sDefaultValue = N'0',
    @i_sDeleteValue = N'-3',
    @i_Reporting = 1,
    @i_Import = 1,
    @i_ExistingBackfillIdsImport = 0,
    @i_DeleteImport = 0,
    @i_SourceData = 0,
    @i_SurrogateKey = 0,
    @i_IdType = 0,
    @i_Id = 0,
    @i_IdTypeId = 0,
    @i_Type1 = 1,
    @i_Type2 = 0,
    @i_DurableKey = 0,
    @i_StartDate = 0,
    @i_EndDate = 0,
    @i_IsCurrent = 0,
    @i_Junk = 0,
    @i_PostEtlType1 = 0,
    @i_PostEtlType2 = 0,
    @i_SourceDataType1 = 0,
    @i_SourceDataType2 = 0,
    @i_sDescription = N'The record status category number for the department record. Refer to the ZC_DEL_STATUS table in the Clarity database for meaning of these values.',
    @i_sImportDescription = N'The record status category number for the department record.',
    @i_iIndex = 720,
    @i_HasStandard = 0,
    @i_iColumnStandardId = NULL,
    @i_EpicReleased = 0,
    @i_ExclFromThirdPartyViews = 1,
    @i_IsSourceColumn = 0,
    @i_IsStatusColumn = 0,
    @i_IsBridgeComboColumn = 0,
    @i_IsPartitioningColumn = 0

  EXECUTE Console.PostInsertIntoTableEtlColumns @sDmcName

  EXECUTE Console.PreInsertIntoDmcPartitionInfo @sDmcName, @EpicReleased

  -- Insert into DmcPartitionInfo
  --    No data   

  EXECUTE Console.PostInsertIntoDmcPartitionInfo @sDmcName, @EpicReleased

  EXECUTE Console.PreInsertIntoTableEtlIndexes @sDmcName, @EpicReleased

  -- Insert into TableEtlIndexes
  --    No data   

  EXECUTE Console.PreInsertIntoWarehouseTables @sDmcName, @EpicReleased

  -- Insert into WarehouseTables
  --    No data   

  EXECUTE Console.PostInsertIntoWarehouseTables @sDmcName, @EpicReleased

  EXECUTE Console.PreInsertIntoOrganizationFilter @sDmcName, @EpicReleased

  -- Insert into OrganizationFilter
  EXECUTE Console.InsertIntoOrganizationFilter
    @i_sDmcName = N'DepartmentDim',
    @i_sReleasedFilterType = N'Unfiltered',
    @i_xReleasedJoinPath = NULL,
    @i_sOverrideFilterType = N'',
    @i_xOverrideJoinPath = N'',
    @i_UseOverride = 0

  EXECUTE Console.PostInsertIntoOrganizationFilter @sDmcName, @EpicReleased

  EXECUTE Console.PreInsertIntoDmcDurationStartAndEndColumns @sDmcName, @EpicReleased

  -- Insert into DmcDurationStartAndEndColumns
  --    No data   

  EXECUTE Console.PreInsertIntoAuxiliaryProcedures @sDmcName, @EpicReleased

  -- Insert into AuxiliaryProcedures
  --    No data   

  EXECUTE Console.PreInsertIntoProcedureColumns @sDmcName, @EpicReleased

  -- Insert into ProcedureColumns
  --    No data   

  EXECUTE Console.PostInsertIntoProcedureColumns @sDmcName

  EXECUTE Console.PreInsertIntoProcedureDataDependencies @sDmcName, @EpicReleased

  -- Insert into ProcedureDataDependencies
  --    No data   

  EXECUTE Console.PreInsertIntoProcedureDataSources @sDmcName, @EpicReleased

  -- Insert into ProcedureDataSources
  --    No data   

  EXECUTE Console.PreInsertIntoWinningBusinessKeySourceGroups @sDmcName, @EpicReleased

  -- Insert into WinningBusinessKeySourceGroups
  --    No data   

  EXECUTE Console.PreInsertIntoWinningBusinessKeySelectLogic @sDmcName, @EpicReleased

  -- Insert into WinningBusinessKeySelectLogic
  --    No data   

  EXECUTE Console.PostDmcScript @sDmcName, @EpicReleased, @HasDeveloperAccess, @ScriptType

  --************************************************************************
  -- PRE-CONVERSION
  -- This code will be executed before the script starts changing the reporting tables.
  -- Replace this comment with your code if needed.
  -- For example if you have renamed an existing column in the metadata, you may want to 
  -- add code to rename the column here otherwise the new column will be created and the
  -- old column will be renamed to column_old.
 
  -- EXECUTE <<insert Reporting Database>>..sp_rename 'dbo.DepartmentDim.<<insert ColumnName_Old>>', '<<insert NewColumnName>>', 'COLUMN'
  --************************************************************************

  EXECUTE Console.CreateTablesInNonDev @sDmcName, @RemoveHistoricalRows

  --************************************************************************
  -- POST-CONVERSION
  -- This code will be executed after the script has changed the reporting tables.
  -- Replace this comment with your code if needed.
  -- For example if you have a column where the data type is changed in the metadata,
  -- the install script will rename the existing column to column_old. You should consider resetting 
  -- the backfill id if needed, add the code to move the data from column_old to column, 
  -- and drop column_old in a background job.

  -- Below are simple examples of actions that may be performed via post-conversion:

  --  Example One: Reset package backfills
  --  EXECUTE dbo.ResetBackfill N'DepartmentDim',
  --          N'<<insert PackageName>>' -- If package name is NULL, backfill id for all packages for DepartmentDim are updated

  --  Example Two: Change column data type
  --  EXECUTE Epic.InsertJob N'Deferred conversion: Populate column ''<<insert ColumnName>>'' in the table ''DepartmentDim'' ',
  --          N'<<insert logic to populate data and drop column_old>>',
  --          N'DepartmentDim', NULL, NULL,
  --          N'<<insert Priority from Config.JobPriorities.Label>>'

  --  Example Three: Drop all old columns present in the DMC
  --  EXECUTE dbo.DropOldColumnsOnDmc N'DepartmentDim'

  --  Example Four: Drop only specified old columns present in the DMC
  --  EXECUTE dbo.DropOldColumnsOnDmc N'DepartmentDim', N'<<insert ColumnName_Old>>'
  --************************************************************************

  -- Release the system level lock
  EXECUTE AppLocking.ReleaseSystemLock @i_sLockOwner = N'Console Generated Script';

COMMIT TRANSACTION
END TRY
BEGIN CATCH
  IF @@TRANCOUNT > 0
  BEGIN
    ROLLBACK
  END
  -- Release the system level lock
  EXECUTE AppLocking.ReleaseSystemLock @i_sLockOwner = N'Console Generated Script';

  -- Throw the error message if any 
  ; THROW;

END CATCH


